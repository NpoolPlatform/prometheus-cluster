alertmanager:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "traefik-internet-developer-vpn"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure, web
      traefik.ingress.kubernetes.io/router.middlewares: kube-system-common-headers@kubernetescrd
    hosts:
      - "alertmanager.internal-devops.${TARGET_ENV}.npool.top"
    path: /
  config:
    route:
      group_by: [ 'job' ]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'wechat'
      routes:
        - receiver: 'wechat'
          matchers:
            - alertname =~ "InfoInhibitor|Watchdog"
    receivers:
      - name: 'wechat'
        wechat_configs:
          - send_resolved: true
            api_url: 'https://qyapi.weixin.qq.com/cgi-bin'
            to_party: 1
            corp_id: ${WECHAT_CORP_ID}
            agent_id: ${WECHAT_AGENT_ID}
            api_secret: ${WECHAT_API_SECRET}
            to_user: '@all'
    templates:
      - /etc/alertmanager/template/*.tmpl
  alertmanagerSpec:
    retention: 120h
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: ${STORAGE_CLASS_NAME}
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi
    volumes:
      - name: wechat-tmpl
        configMap:
          name: wechat-tmpl
    volumeMounts:
      - mountPath: /etc/alertmanager/template
        name: wechat-tmpl
    nodeSelector:
      ${NODE_SELECTOR_LABEL_KEY}: ${NODE_SELECTOR_LABEL_VALUE}

grafana:
  adminPassword: ${GRAFANA_PASSWORD}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "traefik-internet-developer-vpn"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure, web
      traefik.ingress.kubernetes.io/router.middlewares: kube-system-common-headers@kubernetescrd
    hosts:
      - "grafana.internal-devops.${TARGET_ENV}.npool.top"
    path: /
  image:
    repository: uhub.service.ucloud.cn/entropypool/grafana
    tag: "8.5.5"
  nodeSelector:
    ${NODE_SELECTOR_LABEL_KEY}: ${NODE_SELECTOR_LABEL_VALUE}
  sidecar:
    dashboards:
      enabled: true
  persistence:
    type: pvc
    enabled: true
    storageClassName: ${STORAGE_CLASS_NAME}
    accessModes:
      - ReadWriteOnce
    size: 1Gi

prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "traefik-internet-developer-vpn"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure, web
      traefik.ingress.kubernetes.io/router.middlewares: kube-system-common-headers@kubernetescrd
    hosts:
      - "prometheus.internal-devops.${TARGET_ENV}.npool.top"
    path: /
  prometheusSpec:
    retention: 15d
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${STORAGE_CLASS_NAME}
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi

prometheusOperator:
  nodeSelector:
    ${NODE_SELECTOR_LABEL_KEY}: ${NODE_SELECTOR_LABEL_VALUE}
  admissionWebhooks:
    patch:
      nodeSelector:
        ${NODE_SELECTOR_LABEL_KEY}: ${NODE_SELECTOR_LABEL_VALUE}

kube-state-metrics:
  image:
    repository: uhub.service.ucloud.cn/entropypool/kube-state-metrics
    tag: v2.5.0
  nodeSelector:
    ${NODE_SELECTOR_LABEL_KEY}: ${NODE_SELECTOR_LABEL_VALUE}